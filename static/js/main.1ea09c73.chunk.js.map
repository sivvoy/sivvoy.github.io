{"version":3,"sources":["PageObjects/Person.js","PageObjects/Hobbies.js","App.js","serviceWorker.js","index.js"],"names":["person","props","react_default","a","createElement","className","name","age","hobbies","type","onChange","changed","App","state","switchNameHandler","_this","setState","Faker","findName","Math","floor","random","nameChangedHandler","event","target","value","onClick","this","Person","Hobbies","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oTAWeA,WARA,SAACC,GACd,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,gBAAQH,EAAMK,KAAd,iBAAkCL,EAAMM,IAAxC,kBCMSC,WATC,SAACP,GACf,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,UAAb,eAAmCJ,EAAMK,MACzCJ,EAAAC,EAAAC,cAAA,SAAOK,KAAK,OAAOC,SAAUT,EAAMU,aCqC1BC,sNApCbC,MAAQ,CACNb,OAAQ,CAACM,KAAM,SAAUC,IAAK,IAC9BC,QAAS,CAACF,KAAM,aAGlBQ,kBAAoB,WAClBC,EAAKC,SAAU,CACbhB,OAAQ,CAACM,KAAMW,IAAMX,KAAKY,WAAYX,IAAKY,KAAKC,MAAsB,GAAhBD,KAAKE,gBAI/DC,mBAAqB,SAACC,GACpBR,EAAKC,SAAS,CACZR,QAAS,CAACF,KAAMiB,EAAMC,OAAOC,kFAK/B,OACEvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,uCACAF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAASqB,QAASC,KAAKb,mBAAzC,eACAZ,EAAAC,EAAAC,cAACwB,EAAD,CACEtB,KAAMqB,KAAKd,MAAMb,OAAOM,KACxBC,IAAKoB,KAAKd,MAAMb,OAAOO,MAEzBL,EAAAC,EAAAC,cAACyB,EAAD,CACEvB,KAAMqB,KAAKd,MAAML,QAAQF,KACzBK,QAASgB,KAAKL,6BA9BNQ,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1ea09c73.chunk.js","sourcesContent":["import React from 'react';\nimport '../Assets/important-message.css';\n\nconst person = (props) => {\n  return (\n    <div className=\"important-message\">\n      <p>I'm {props.name} and I am age {props.age} years old!</p>\n    </div>\n  )\n}\n\nexport default person;","import React from 'react';\nimport '../Assets/italic.css';\n\nconst hobbies = (props) => {\n  return (\n    <div>\n      <p className=\"italic\">My Hobbies: {props.name}</p>\n      <input type=\"text\" onChange={props.changed} />\n    </div>\n  )\n}\n\nexport default hobbies;","import React, { Component } from 'react';\nimport './App.css';\nimport Faker from 'faker';\nimport Person from './PageObjects/Person'\nimport Hobbies from './PageObjects/Hobbies'\nimport './Assets/button.css'\n\nclass App extends Component {\n  state = {\n    person: {name: 'Sivvoy', age: 21},\n    hobbies: {name: 'Tennis'}\n  }\n\n  switchNameHandler = () => {\n    this.setState( {\n      person: {name: Faker.name.findName(), age: Math.floor(Math.random() * 30)}\n    } )\n  }\n\n  nameChangedHandler = (event) => {\n    this.setState({\n      hobbies: {name: event.target.value}\n    })\n  }\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <h1>React</h1>\n        <p> Sivvoy is learning React!</p>\n        <button className=\"button\" onClick={this.switchNameHandler}>Switch Name</button>\n        <Person \n          name={this.state.person.name}\n          age={this.state.person.age}\n        />\n        <Hobbies\n          name={this.state.hobbies.name}\n          changed={this.nameChangedHandler}\n        />\n      </div>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}